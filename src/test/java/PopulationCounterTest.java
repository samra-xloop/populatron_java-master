/*
 * This Java source file was generated by the Gradle 'init' task.
 */



import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.BDDMockito.then;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import part2.Parser;
import part2.Reader;
import part2.Summation;


public class PopulationCounterTest {
    @Test
    public void testSomeLibraryMethod() throws Exception {

        // Setup
        String expected = "World population is: 1,347,982,728\n";

        // https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);

        // Exercise
        PopulationCounter.main(new String[] {"./data/worldcitiespop.csv"});

        // Assert
        System.out.flush();
        String output = baos.toString();
        assertEquals(expected, output );

        // Teardown
        System.setOut(old);
    }
    @Test 
    public void testReader() throws IOException{
        List<String> expected = new ArrayList<>();
        expected.add("ad,andorra la vella,Andorra la Vella,07,20430,42.5,1.5166667");

        when(Files.readAllLines(any(Path.class), eq(StandardCharsets.ISO_8859_1))).thenReturn(expected);

        List<String> actual =Reader.read("./data/worldcitiespop.csv");
        
       
        verify(Files).readAllLines(eq(Paths.get("file.csv")), eq(StandardCharsets.ISO_8859_1));

        assertEquals(expected, actual);
    }

    @Test
    public void testParser(){
        List<String> input = new ArrayList<>();
        input.add("Country,City,AccentCity,Region,Population,Latitude,Longitude");
        input.add("ad,andorra la vella,Andorra la Vella,07,20430,42.5,1.5166667");
        input.add("ad,andorra la vella,Andorra la Vella,07,20430,42.5,1.5166667");

        List<Long> expected= new ArrayList<>(List.of(20430L,20430L));

        List<Long> actual= Parser.parser(input);

        assertEquals(expected, actual);
    }


    @Test
    public void testSummation(){

        
        List<Long> input= new ArrayList<>(List.of(20430L,20430L));

        long sum= Summation.sum(input);

        assertEquals(40860L,sum);

    }
    
}
